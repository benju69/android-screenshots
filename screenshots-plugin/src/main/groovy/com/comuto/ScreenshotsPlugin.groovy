package com.comuto

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import com.mounacheikhna.capture.CaptureRunnerTask
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Delete
import org.gradle.api.tasks.Exec
import org.gradle.api.tasks.StopExecutionException

/**
 * Top-level plugin for managing task for running tests that generate screenshots and copying them
 * to src/main/play folder.
 **/
public class ScreenshotsPlugin implements Plugin<Project> {

    private static final String GROUP_SCREENSHOTS = "screenshots"
    public static final String DEFAULT_PRODUCT_FLAVOR = "defaultConfig"
    public static final String DEFAULT_BUILD_TYPE = "debug"

    @Override
    void apply(Project project) {
        project.extensions.add("screenshots", ScreenshotsExtension)

        sanitizeInput(project)

        project.afterEvaluate {
            File configFile = new File("${project.projectDir}/${project.screenshots.configFilePath}")

            if (!configFile.exists()) {
              throw new StopExecutionException("ConfigFile doesn't exist")
            }

            Task cleanFoldersTask = createCleanTask(project)
            Map<String, String> configValues = ParseUtils.valuesFromFile(configFile)
            Task copyPlayTask = createCopyPlayTask(project, configValues)
            Task screenshotsTask = createScreenshotsTasks(project, configValues)

            Task frameTask = project.tasks.getByName("FrameScreenshots")
            if(frameTask != null) {
                createScreenshotsWorkflowTask(project, cleanFoldersTask, screenshotsTask, frameTask, copyPlayTask)
            }
            else {
                createScreenshotsWorkflowTask(project, cleanFoldersTask, screenshotsTask, copyPlayTask)
            }
        }
    }

   Task createCleanTask(Project project) {
        return project.task("cleanFoldersTask") {
            new File("${project.projectDir}/${project.screenshots.screenshotsDir}")
                    .eachFileRecurse {
                file -> file.delete()
            }
            if(new File("${project.projectDir}/${project.screenshots.finalOutputDir}").exists()) {
                new File("${project.projectDir}/${project.screenshots.finalOutputDir}")
                .eachFileRecurse {
                    file -> file.delete()
                }
            }
        }
    }

    private void createScreenshotsWorkflowTask(Project project, Task... tasks) {
        Task screenshotsWorkflowTask = project.task("ScreenshotsWorkflow",
                group: GROUP_SCREENSHOTS,
                description: "Run the complete screenshot pipeline.")
        dependsOnOrdered(screenshotsWorkflowTask, tasks)
    }

    private Task createScreenshotsTasks(Project project, Map<String, String> configValues) {
        String screenshotsDirName = "${project.projectDir}/${project.screenshots.screenshotsDir}"

        Task takeAllScreenshots = project.task("Screenshots",
                group: GROUP_SCREENSHOTS,
                description: "Takes screenshots generated by spoon on all the connected devices.")

        List<Task> localesTasks = createTestsRunTasks(project, screenshotsDirName, configValues)
        String productFlavor = project.screenshots.productFlavor
        def flavorTaskName = productFlavor.capitalize()

        Task assembleTask = project.tasks.findByName("assemble$flavorTaskName")
        Task assembleTestTask = project.tasks.findByName("assembleAndroidTest")

        if (localesTasks.isEmpty()) {
            return
        }
        localesTasks.get(0).dependsOn assembleTask
        localesTasks.get(0).dependsOn assembleTestTask
        int size = localesTasks.size();
        for (int i = 1; i < size; i++) {
            localesTasks.get(i).dependsOn localesTasks.get(i - 1)
        }
        takeAllScreenshots.dependsOn localesTasks.get(size - 1)
        return takeAllScreenshots
    }

    private Task createCopyPlayTask(Project project, Map<String, String> configValues) {
        String[] localesStr
        if (configValues.containsKey("locales") && configValues.get("locales") != null) {
            String strl = configValues.get("locales")
            localesStr = strl.split(",");
        }
        return project.task("CopyToPlayFolders",
                type: ProcessScreenshotsTask,
                group: GROUP_SCREENSHOTS,
                description: "Copy generated screenshots into play folder each in the right place.") {
            localesValues localesStr
            screenshotsOutputDir project.screenshots.finalOutputDir
            phoneSerialNo project.screenshots.phone
            sevenInchDeviceSerialNo project.screenshots.sevenInchDevice
            tenInchDeviceSerialNo project.screenshots.tenInchDevice
        }
    }

    private static void dependsOnOrdered(Task task, Task... others) {
        task.dependsOn(others)
        for (int i = 0; i < others.size() - 1; i++) {
            if(others[i] != null) {
                others[i + 1].mustRunAfter(others[i])
            }
        }
    }

    private void sanitizeInput(Project project) {
        //first lets check that at least one serial nb is provided
        if ([project.screenshots.phone, project.screenshots.sevenInchDevice, project.screenshots.tenInchDevice]
                .every { it?.trim() == false }) {
            throw new IllegalArgumentException("You must provide a serial number of a phone or seven " +
                    "inch or tablet device. Use adb devices command to find the serial number for the connected device.")
        }
        project.screenshots.productFlavor = project.screenshots.productFlavor ?: DEFAULT_PRODUCT_FLAVOR
        project.screenshots.buildType = project.screenshots.buildType ?: DEFAULT_BUILD_TYPE
    }

    private List<Task> createTestsRunTasks(Project project, String screenshotOutputDirName, Map<String, String> values) {
        String apkPath = getApkPath(project)
        String testAppPath = getTestApkPath(project)
        String testPackage = getTestPackage(project)

        String localesStr = values.get("locales")
        if(localesStr == null) {
            throw new StopExecutionException("Illegal Argument locales.")
        }
        def locales = localesStr.split(",")
        List<Task> localesTasks = new ArrayList<>()
        locales.each {
            String currentLocale = it
            def localeFileName = values.get(currentLocale) // may not work -> values.get("$currentLocale")
            Task testRunTask = createTestRunTask(project, currentLocale, values, apkPath, testAppPath, testPackage, screenshotOutputDirName)
            Task generateJsonTask = createJsonGenerateTask(project, currentLocale, localeFileName)
            testRunTask.dependsOn generateJsonTask
            testRunTask.mustRunAfter generateJsonTask
            localesTasks.add(testRunTask)
        }
        localesTasks
    }

    private Task createJsonGenerateTask(Project project, String currentLocale, localeFileName) {
        String screenshotProductFlavor = project.screenshots.productFlavor

        Map<String, String> files = new HashMap<>()
        files.put("placeholder_screenshots_geocode_departure.json", "${currentLocale}_generated_geocode_search_departure.json")
        files.put("placeholder_screenshots_geocode_arrival.json", "${currentLocale}_generated_geocode_search_arrival.json")
        files.put("placeholder_screenshots_trips.json", "${currentLocale}_generated_trips.json")
        files.put("placeholder_screenshots_conversation.json", "${currentLocale}_generated_conversation.json")
        files.put("placeholder_screenshots_seats.json", "${currentLocale}_generated_seats.json")
        files.put("placeholder_screenshots_profile.json", "${currentLocale}_generated_profile.json")

        //String firstConfigPath = getFirstPassConfigPath(project, localeFileName)

        Task generateJsonTask = project.task("${currentLocale}CreateJson",
                type: GenerateJsonTask,
                group: GROUP_SCREENSHOTS,
                description: "Generates Json files from the templates and replaces the placeholders with the provided values.") {
            locale currentLocale
            firstPassConfig "${project.projectDir}/src/${project.screenshots.productFlavor}/assets/$localeFileName", "##", "##", false
            secondPassConfig "${project.projectDir}/${project.screenshots.imagesConfigFilePath}", "", "", false
            productFlavor screenshotProductFlavor
            jsonFiles files
        }
        generateJsonTask
    }

    private Task createTestRunTask(Project project, String currentLocale, Map<String, String> values, String apkPath,
                                                String testAppPath, String testPackage, String screenshotOutputDirName) {
        def args = [:]
        args.put("locale", currentLocale)
        values.findAll { k, v -> k.contains(currentLocale) }
                .each {
            key, val ->
                args.put(key, val)
        }

        return project.task("${currentLocale}TestRunTask", type: CaptureRunnerTask) {
            appApkPath apkPath
            testApkPath testAppPath
            testPackageName testPackage
            serialNumber project.screenshots.phone
            outputPath "$screenshotOutputDirName"
            instrumentationArgs args
            testClassName project.screenshots.screenshotClass
            taskPrefix "${currentLocale}"
        }
    }

    private String getTestPackage(Project project) {
        def buildType = project.screenshots.buildType
        def suffix = project.android.buildTypes."$buildType".getVersionNameSuffix()
        if (suffix?.trim()) {
            suffix = suffix.replace("-", "")
            return "${project.screenshots.appPackageName}" + "." + "${suffix}" + ".test"
        } else {
            return "${project.screenshots.appPackageName}" + ".test"
        }
    }

    private String getTestApkPath(Project project) {
        String screenshotProductFlavor = project.screenshots.productFlavor
        return "${project.buildDir}/outputs/apk/${project.name}-$screenshotProductFlavor-${project.screenshots.buildType}-androidTest-unaligned.apk"
    }

    private String getApkPath(Project project) {
        String screenshotProductFlavor = project.screenshots.productFlavor
        if (project.screenshots.hasApkSplit) {
            return "${project.buildDir}/outputs/apk/${project.name}-$screenshotProductFlavor-universal-${project.screenshots.buildType}-unaligned.apk"
        } else {
            return "${project.buildDir}/outputs/apk/${project.name}-$screenshotProductFlavor-${project.screenshots.buildType}-unaligned.apk"
        }
    }

}